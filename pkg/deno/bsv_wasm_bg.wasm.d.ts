/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function ecdsa_verify(a: number, b: number, c: number, d: number, e: number): number;
export function __wbg_eciesciphertext_free(a: number): void;
export function eciesciphertext_getCiphertext(a: number, b: number): void;
export function eciesciphertext_getHMAC(a: number, b: number): void;
export function eciesciphertext_getCipherKeys(a: number): number;
export function eciesciphertext_toBytes(a: number, b: number): void;
export function eciesciphertext_extractPublicKey(a: number): number;
export function eciesciphertext_fromBytes(a: number, b: number, c: number): number;
export function __wbg_extendedprivatekey_free(a: number): void;
export function extendedprivatekey_getPrivateKey(a: number): number;
export function extendedprivatekey_getPublicKey(a: number): number;
export function extendedprivatekey_getChainCode(a: number, b: number): void;
export function extendedprivatekey_getDepth(a: number): number;
export function extendedprivatekey_getParentFingerprint(a: number, b: number): void;
export function extendedprivatekey_getIndex(a: number): number;
export function extendedprivatekey_deriveChild(a: number, b: number): number;
export function extendedprivatekey_derive(a: number, b: number, c: number): number;
export function extendedprivatekey_fromSeed(a: number, b: number): number;
export function extendedprivatekey_fromRandom(): number;
export function extendedprivatekey_fromString(a: number, b: number): number;
export function extendedprivatekey_toString(a: number, b: number): void;
export function extendedprivatekey_fromMnemonic(a: number, b: number, c: number, d: number): number;
export function transaction_verify(a: number, b: number, c: number): number;
export function transaction_sign(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function transaction_signWithK(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function transaction_sighashPreimage(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function __wbg_sighashsignature_free(a: number): void;
export function sighashsignature_new(a: number, b: number, c: number, d: number): number;
export function sighashsignature_toHex(a: number, b: number): void;
export function sighashsignature_toBytes(a: number, b: number): void;
export function __wbg_extendedpublickey_free(a: number): void;
export function extendedpublickey_getPublicKey(a: number): number;
export function extendedpublickey_fromXPriv(a: number): number;
export function extendedpublickey_getChainCode(a: number, b: number): void;
export function extendedpublickey_getDepth(a: number): number;
export function extendedpublickey_getParentFingerprint(a: number, b: number): void;
export function extendedpublickey_getIndex(a: number): number;
export function extendedpublickey_deriveChild(a: number, b: number): number;
export function extendedpublickey_derive(a: number, b: number, c: number): number;
export function extendedpublickey_fromSeed(a: number, b: number): number;
export function extendedpublickey_fromRandom(): number;
export function extendedpublickey_fromString(a: number, b: number): number;
export function extendedpublickey_toString(a: number, b: number): void;
export function __wbg_ecdsa_free(a: number): void;
export function __wbg_hash_free(a: number): void;
export function hash_toBytes(a: number, b: number): void;
export function hash_toHex(a: number, b: number): void;
export function hash_sha256d(a: number, b: number): number;
export function hash_sha256(a: number, b: number): number;
export function hash_sha1(a: number, b: number): number;
export function hash_ripemd160(a: number, b: number): number;
export function hash_hash160(a: number, b: number): number;
export function hash_sha512(a: number, b: number): number;
export function hash_sha512Hmac(a: number, b: number, c: number, d: number): number;
export function hash_sha256Hmac(a: number, b: number, c: number, d: number): number;
export function hash_sha256dHmac(a: number, b: number, c: number, d: number): number;
export function hash_sha1Hmac(a: number, b: number, c: number, d: number): number;
export function hash_ripemd160Hmac(a: number, b: number, c: number, d: number): number;
export function hash_hash160Hmac(a: number, b: number, c: number, d: number): number;
export function ecdh_deriveSharedKey(a: number, b: number, c: number): void;
export function __wbg_ecdh_free(a: number): void;
export function __wbg_txin_free(a: number): void;
export function txin_new(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function txin_default(): number;
export function txin_getPrevTxId(a: number, b: number, c: number): void;
export function txin_getPrevTxIdHex(a: number, b: number, c: number): void;
export function txin_getVOut(a: number): number;
export function txin_getScriptSigSize(a: number, b: number): void;
export function txin_getScriptSig(a: number): number;
export function txin_getScriptSigHex(a: number, b: number): void;
export function txin_getSequence(a: number): number;
export function txin_getSequenceAsBytes(a: number, b: number): void;
export function txin_getOutpointBytes(a: number, b: number, c: number): void;
export function txin_getOutpointHex(a: number, b: number, c: number): void;
export function txin_setScript(a: number, b: number): void;
export function txin_setPrevTxId(a: number, b: number, c: number): void;
export function txin_setVOut(a: number, b: number): void;
export function txin_setSequence(a: number, b: number): void;
export function txin_setSatoshis(a: number, b: number, c: number): void;
export function txin_getSatoshis(a: number, b: number): void;
export function txin_setUnlockingScript(a: number, b: number): void;
export function txin_getUnlockingScript(a: number): number;
export function txin_getUnlockingScriptBytes(a: number, b: number): void;
export function txin_fromHex(a: number, b: number): number;
export function txin_toJSON(a: number): number;
export function txin_toString(a: number, b: number): void;
export function txin_toBytes(a: number, b: number): void;
export function txin_toHex(a: number, b: number): void;
export function txin_fromOutpointBytes(a: number, b: number): number;
export function txin_toCompactBytes(a: number, b: number): void;
export function txin_toCompactHex(a: number, b: number): void;
export function txin_fromCompactBytes(a: number, b: number): number;
export function txin_fromCompactHex(a: number, b: number): number;
export function txin_getFinalisedScript(a: number): number;
export function txin_isCoinbase(a: number): number;
export function __wbg_chainparams_free(a: number): void;
export function __wbg_get_chainparams_p2pkh(a: number): number;
export function __wbg_set_chainparams_p2pkh(a: number, b: number): void;
export function __wbg_get_chainparams_p2sh(a: number): number;
export function __wbg_set_chainparams_p2sh(a: number, b: number): void;
export function __wbg_get_chainparams_privkey(a: number): number;
export function __wbg_set_chainparams_privkey(a: number, b: number): void;
export function __wbg_get_chainparams_xpub(a: number): number;
export function __wbg_set_chainparams_xpub(a: number, b: number): void;
export function __wbg_get_chainparams_xpriv(a: number): number;
export function __wbg_set_chainparams_xpriv(a: number, b: number): void;
export function __wbg_get_chainparams_magic(a: number): number;
export function __wbg_set_chainparams_magic(a: number, b: number): void;
export function chainparams_new(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function chainparams_Mainnet(): number;
export function chainparams_Testnet(): number;
export function chainparams_Regtest(): number;
export function chainparams_STN(): number;
export function __wbg_p2pkhaddress_free(a: number): void;
export function p2pkhaddress_toPubKeyHashBytes(a: number, b: number): void;
export function p2pkhaddress_toPubKeyHashHex(a: number, b: number): void;
export function p2pkhaddress_isValidBitcoinMessage(a: number, b: number, c: number, d: number): number;
export function p2pkhaddress_fromPubKeyHash(a: number, b: number): number;
export function p2pkhaddress_fromPubKey(a: number): number;
export function p2pkhaddress_setChainParams(a: number, b: number): number;
export function p2pkhaddress_toString(a: number, b: number): void;
export function p2pkhaddress_fromString(a: number, b: number): number;
export function p2pkhaddress_toLockingScript(a: number): number;
export function p2pkhaddress_toUnlockingScript(a: number, b: number, c: number): number;
export function p2pkhaddress_verifyBitcoinMessage(a: number, b: number, c: number, d: number): number;
export function __wbg_scripttemplate_free(a: number): void;
export function scripttemplate_from_script(a: number): number;
export function scripttemplate_from_asm_string(a: number, b: number): number;
export function script_matches(a: number, b: number): number;
export function script_is_match(a: number, b: number): number;
export function kdf_pbkdf2(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function chainparams_default(): number;
export function __wbg_privatekey_free(a: number): void;
export function privatekey_toBytes(a: number, b: number): void;
export function privatekey_toHex(a: number, b: number): void;
export function privatekey_fromRandom(): number;
export function privatekey_getPoint(a: number, b: number): void;
export function privatekey_compressPublicKey(a: number, b: number): number;
export function privatekey_fromWIF(a: number, b: number): number;
export function privatekey_fromHex(a: number, b: number): number;
export function privatekey_signMessage(a: number, b: number, c: number): number;
export function privatekey_toWIF(a: number, b: number): void;
export function privatekey_fromBytes(a: number, b: number): number;
export function privatekey_toPublicKey(a: number): number;
export function privatekey_encryptMessage(a: number, b: number, c: number): number;
export function privatekey_decryptMessage(a: number, b: number, c: number, d: number): void;
export function ecdsa_signWithRandomK(a: number, b: number, c: number, d: number, e: number): number;
export function ecdsa_sign(a: number, b: number, c: number, d: number, e: number): number;
export function ecdsa_signWithK(a: number, b: number, c: number, d: number, e: number): number;
export function bsm_isValidMessage(a: number, b: number, c: number, d: number): number;
export function bsm_verifyMessage(a: number, b: number, c: number, d: number): number;
export function bsm_signMessage(a: number, b: number, c: number): number;
export function bsm_signMessageWithK(a: number, b: number, c: number, d: number): number;
export function __wbg_bsm_free(a: number): void;
export function __wbg_recoveryinfo_free(a: number): void;
export function recoveryinfo_new(a: number, b: number, c: number): number;
export function recoveryinfo_from_byte(a: number, b: number): number;
export function recoveryinfo_default(): number;
export function __wbg_signature_free(a: number): void;
export function signature_toHex(a: number, b: number): void;
export function signature_toBytes(a: number, b: number): void;
export function signature_toCompactBytes(a: number, b: number, c: number): void;
export function signature_toCompactHex(a: number, b: number, c: number): void;
export function signature_verifyMessage(a: number, b: number, c: number, d: number): number;
export function signature_fromDER(a: number, b: number): number;
export function signature_fromHexDER(a: number, b: number): number;
export function signature_fromCompactBytes(a: number, b: number): number;
export function signature_recoverPublicKey(a: number, b: number, c: number, d: number): number;
export function __wbg_bytes_free(a: number): void;
export function bytes_readReverse(a: number, b: number): void;
export function bytes_read(a: number, b: number): void;
export function bytes_reverse(a: number): void;
export function bytes_toHex(a: number, b: number): void;
export function bytes_fromHex(a: number, b: number): number;
export function ecdsa_privateKeyFromSignatureK(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function init(): void;
export function __wbg_transaction_free(a: number): void;
export function transaction_getVersion(a: number): number;
export function transaction_getInputsCount(a: number): number;
export function transaction_getOutputsCount(a: number): number;
export function transaction_getInput(a: number, b: number): number;
export function transaction_getOutput(a: number, b: number): number;
export function transaction_getNLocktime(a: number): number;
export function transaction_getNLocktimeAsBytes(a: number, b: number): void;
export function transaction_new(a: number, b: number): number;
export function transaction_default(): number;
export function transaction_setVersion(a: number, b: number): number;
export function transaction_setNLocktime(a: number, b: number): number;
export function transaction_addInput(a: number, b: number): void;
export function transaction_prependInput(a: number, b: number): void;
export function transaction_insertInput(a: number, b: number, c: number): void;
export function transaction_addOutput(a: number, b: number): void;
export function transaction_prependOutput(a: number, b: number): void;
export function transaction_insertOutput(a: number, b: number, c: number): void;
export function transaction_setInput(a: number, b: number, c: number): void;
export function transaction_setOutput(a: number, b: number, c: number): void;
export function transaction_satoshisIn(a: number, b: number): void;
export function transaction_satoshisOut(a: number, b: number): void;
export function transaction_fromHex(a: number, b: number): number;
export function transaction_fromBytes(a: number, b: number): number;
export function transaction_toString(a: number, b: number): void;
export function transaction_fromJsonString(a: number, b: number): number;
export function transaction_toJSON(a: number): number;
export function transaction_toBytes(a: number, b: number): void;
export function transaction_toHex(a: number, b: number): void;
export function transaction_getSize(a: number): number;
export function transaction_addInputs(a: number, b: number, c: number): void;
export function transaction_getOutpoints(a: number): number;
export function transaction_addOutputs(a: number, b: number, c: number): void;
export function transaction_getIdHex(a: number, b: number): void;
export function transaction_getIdBytes(a: number, b: number): void;
export function transaction_toCompactBytes(a: number, b: number): void;
export function transaction_toCompactHex(a: number, b: number): void;
export function transaction_fromCompactBytes(a: number, b: number): number;
export function transaction_fromCompactHex(a: number, b: number): number;
export function transaction_isCoinbase(a: number): number;
export function transaction_is_coinbase_impl(a: number): number;
export function __wbg_script_free(a: number): void;
export function script_toBytes(a: number, b: number): void;
export function script_getScriptLength(a: number): number;
export function script_toHex(a: number, b: number): void;
export function script_removeCodeSeparators(a: number): void;
export function script_toASMString(a: number, b: number): void;
export function script_toExtendedASMString(a: number, b: number): void;
export function script_fromHex(a: number, b: number): number;
export function script_fromBytes(a: number, b: number): number;
export function script_fromASMString(a: number, b: number): number;
export function script_encodePushData(a: number, b: number, c: number): void;
export function script_getPushDataBytes(a: number, b: number): void;
export function script_toScriptBits(a: number): number;
export function __wbg_matchcriteria_free(a: number): void;
export function matchcriteria_new(): number;
export function matchcriteria_setScriptTemplate(a: number, b: number): number;
export function matchcriteria_setValue(a: number, b: number, c: number): number;
export function matchcriteria_setMin(a: number, b: number, c: number): number;
export function matchcriteria_setMax(a: number, b: number, c: number): number;
export function transaction_matchOutput(a: number, b: number, c: number): void;
export function transaction_matchOutputs(a: number, b: number, c: number): void;
export function transaction_matchInput(a: number, b: number, c: number): void;
export function transaction_matchInputs(a: number, b: number, c: number): void;
export function __wbg_txout_free(a: number): void;
export function txout_new(a: number, b: number, c: number): number;
export function txout_getSatoshis(a: number, b: number): void;
export function txout_getSatoshisAsBytes(a: number, b: number): void;
export function txout_getScriptPubKeySize(a: number): number;
export function txout_getScriptPubKey(a: number): number;
export function txout_getScriptPubKeyHex(a: number, b: number): void;
export function txout_fromHex(a: number, b: number): number;
export function txout_toBytes(a: number, b: number): void;
export function txout_toHex(a: number, b: number): void;
export function txout_toJSON(a: number): number;
export function txout_toString(a: number, b: number): void;
export function __wbg_kdf_free(a: number): void;
export function kdf_getHash(a: number): number;
export function __wbg_cipherkeys_free(a: number): void;
export function cipherkeys_get_iv(a: number, b: number): void;
export function cipherkeys_get_ke(a: number, b: number): void;
export function cipherkeys_get_km(a: number, b: number): void;
export function ecies_encrypt(a: number, b: number, c: number, d: number, e: number): number;
export function ecies_encryptWithEphemeralKey(a: number, b: number, c: number): number;
export function ecies_decrypt(a: number, b: number, c: number, d: number): void;
export function ecies_deriveCipherKeys(a: number, b: number): number;
export function kdf_getSalt(a: number, b: number): void;
export function __wbg_ecies_free(a: number): void;
export function __wbg_publickey_free(a: number): void;
export function publickey_isValidMessage(a: number, b: number, c: number, d: number): number;
export function publickey_isCompressed(a: number): number;
export function publickey_fromHex(a: number, b: number): number;
export function publickey_fromBytes(a: number, b: number): number;
export function publickey_toBytes(a: number, b: number): void;
export function publickey_toHex(a: number, b: number): void;
export function publickey_fromPrivateKey(a: number): number;
export function publickey_verifyMessage(a: number, b: number, c: number, d: number): number;
export function publickey_toAddress(a: number): number;
export function publickey_toCompressed(a: number): number;
export function publickey_toDecompressed(a: number): number;
export function publickey_encryptMessage(a: number, b: number, c: number, d: number): number;
export function aes_encrypt(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function aes_decrypt(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function __wbg_aes_free(a: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
